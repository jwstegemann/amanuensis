package amanuensis.core

import akka.testkit.{ImplicitSender, TestKit}
import akka.actor.ActorSystem
import akka.pattern.ask

import org.specs2.mutable.SpecificationLike

import spray.http.{StatusCode, StatusCodes}

//import scala.concurrent.duration._

import amanuensis.domain._
import amanuensis.domain.Severities._
import amanuensis.api.exceptions._


class StoryActorSpec(system: ActorSystem) extends TestKit(system) with ImplicitSender with WordSpec with MustMatchers with BeforeAndAfterAll with CoreActors with Core {
  
  def this() = this(ActorSystem("MySpec"))

  import StoryActor._
  import SlotActor._


  override def afterAll {
    TestKit.shutdownActorSystem(system)
  }

  sequential

  "StoryActor" must {

    sequential

    var firstId: String = ""
    var secondId: String = ""

    "create a story" in {
      val testtitle = "Autotest_1"

      storyActor ! Create(Story(None, testtitle, "Autotest_Content_1"))
    
      expectMsgPF() {
        case x => {
          println(x)
          success
        }
/*        case StoryInfo(id, title) => {
          firstId = id
          title mustEqual testtitle //if id == 24 => success
        }
*/
      }
    }

/*    "update the created story" in {
      storyActor ! Update(firstId, Story(Some(firstId), "Autotest_1", "Autotest_Content_neu"))
      expectMsgPF() {
        case x: Unit => {
          success
        }
      }
    }
*/
    "create a new story in slot" in {
      val testtitle2 = "Autotest_2"

      slotActor ! CreateAndAdd(firstId, "Autotest_Slot_1", Story(None, testtitle2, "Autotest_Content_2"))
    
      expectMsgPF() {
        case StoryInfo(id, title) => {
          secondId = id
          title mustEqual testtitle2 //if id == 24 => success
        }
      }
    }

/*    "find created story in slot" in {
      slotActor ! List(firstId, "Autotest_Slot_1")
      expectMsg(StoryInfo(secondId, "Autotest_2") :: Nil)
      success
    }

    "add story to slot" in {
      slotActor ! Add(secondId, "Autotest_Slot_2", firstId)
      expectMsgClass(classOf[Unit])
    }

    "find added story in slot" in {
      slotActor ! List(secondId, "Autotest_Slot_2")
      expectMsg(StoryInfo(firstId, "Autotest_1") :: Nil)
      success
    }

    "remove created story from slot" in {
      slotActor ! Remove(firstId, "Autotest_Slot_1", secondId)
      expectMsgClass(classOf[Unit])
    }

    "not find created story in slot anymore" in {
      slotActor ! List(firstId, "Autotest_Slot_1")
      expectMsg(Nil)
    }

    "delete all stories" in {
      storyActor ! Delete(firstId)
      expectMsgClass(classOf[Unit])
      storyActor ! Delete(secondId)
      expectMsgClass(classOf[Unit])
    }
*/


/*    "accept valid user to be registered" in {
      registration ! Register(mkUser("jan@eigengo.com"))
      expectMsg(Right(Registered))
      success
    }
*/    
  }

}